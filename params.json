{"body":"installer.sh\r\n============\r\n\r\nWrite your own installation script!\r\n\r\n\r\nWhat is installer.sh for?\r\n-------------------------\r\n\r\nI'm tired of downloading tarballs, extracting them and running commands like\r\n`./configure`, `make`, `make install` ... many many times. Definitely developers\r\nknow where to download the tarballs from, how to build and how to install the\r\nSoftwares. They should write the script to automate installation.\r\n\r\ninstaller.sh makes it easy to write scripts automating installation. You can\r\nautomate installion of your great softwares or some other useful softwares by\r\ndefining a few variables and a function in installer.sh.\r\n\r\ninstaller.sh is strongly inspired by [ArchLinux](http://www.archlinux.org/)'s\r\nmakepkg and [PKGBUILD](https://wiki.archlinux.org/index.php/Creating_Packages).\r\n\r\n\r\nThings installer.sh does not do\r\n-------------------------------\r\n\r\ninstaller.sh is not a package manager. It does not:\r\n\r\n* manage installed packages\r\n* resolve dependencies\r\n* record installed files (and uninstall packages by removing these files)\r\n* update packages automatically\r\n\r\nUsers who want to install softwares should not use installer.sh when the\r\nsoftwares are provided by package managers. This script is for softwares which\r\nare not so popular, or not updated to newer version on some systems.\r\n\r\n\r\nInstall\r\n-------\r\n\r\ninstaller.sh is not intended to install. Use this script as a template and write\r\ncommands as you need!\r\n\r\n\r\nDefine a package\r\n----------------\r\n\r\nDefine some variables and functions.\r\n\r\n### $pkgname\r\n\r\nName of package.\r\n\r\n### $source (if needed)\r\n\r\nNewline separated list of urls of archives. Archive listed here will be\r\ndownloaded and extracted automatically. If the archives already exist, do\r\nnot download them twice.\r\n\r\nEach line is just the url to download archives or can be like\r\n`$pkgname-$pkgver.tar.gz::http://example.com/file.tar.gz`. In this form, you can\r\nchange the name of downloaded archive.\r\n\r\nEach Downloaded file is extracted immediately in `$srcdir` If it has a archive\r\n suffix.\r\n\r\n### $pkgver (optional)\r\n\r\nVersion of the software.\r\n\r\n### $pkgdesc (optional)\r\n\r\nShort description.\r\n\r\n### $url (optional)\r\n\r\nUrl of the software.\r\n\r\n### main()\r\n\r\nFunction called when installing package.\r\n\r\nBefore `main()` is called, archives listed in `$sources` are downloaded and\r\nextracted, and `$startdir` and `$srcdir` are set. `$startdir` is the working\r\ndirectory when install.sh was executed and `$srcdir` is directory where\r\ndownloaded archive files are extracted. Usually you can use a command like\r\n`cd $srcdir/$pkgname-$pkgver` to go into the directory the files were\r\nextracted.\r\n\r\n### help_main() (optional)\r\n\r\nAdditional help descripting options of `main()`. If defined, this function\r\nis called when subcommand `help` is used.\r\n\r\n\r\nUse installer.sh\r\n----------------\r\n\r\nTo install the package, run:\r\n\r\n    $ ./installer.sh install\r\n\r\nSubcommand `install` fetches files listed in `$sources`, extracts them if they\r\nare archive files, and then calls `main()` with given options.\r\n\r\nTo only download archive listed in $source and extract them, run:\r\n\r\n    $ ./installer.sh fetch\r\n\r\nThis command is especially useful when you are writing `main()` or you want\r\nto issue some commands before calling `main()`.\r\n\r\n### Note: fetching and extracting\r\n\r\nFetching a file and extracting are done when and only when the file does not\r\nexist. If a file is already exists at the path the file to be fetched would\r\nbe placed, neither fetching nor extracting the file are done. So if you remove\r\nonly files generated by extracting, things do not work well because files\r\nare not extracted since the archive file already exists.\r\n\r\n\r\nLicense\r\n-------\r\n\r\nAll code licensed under CC0: <http://creativecommons.org/publicdomain/zero/1.0/>\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Installer.sh","tagline":"Template for installation automation script","google":""}